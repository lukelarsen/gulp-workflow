/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 *  RESPONSIVE SETTINGS
 *  RESPONSIVE MIXIN
 */

////
/// @group responsive
/// @link http://csswizardry.com/csswizardry-grids/
/// @author Harry Roberts
////





/*------------------------------------*\
    !RESPONSIVE SETTINGS
\*------------------------------------*/

/// Define your breakpoints here.
/// @type map
$breakpoints: (
    'palm' '(max-width: 480px)',
    'lap' '(min-width: 481px) and (max-width: 1023px)',
    'portable' '(max-width: 1023px)', // both lap and palm
    'desk' '(max-width: 1024px)',
    'wide' '(min-width:1500px)'
);


/**
 * Set where breakpoints start.
 */

/// Set where the lap breakpoint starts.
/// @type number
$lap-start:         481px;

/// Set where the desk breakpoint starts.
/// @type number
$desk-start:        1024px;

/// Set where the wide breakpoint starts.
/// @type number
$wide-start:        1500px;


/**
 * This list will make silent classes like %palm--full or %palm--grid-halves render
 * for you to extend. Your options are 'palm', 'lap', 'portable', 'desk', 'wide'.
 * If $use-silent-classes is set to false it will make regular classes instead of
 * silent classes.
 */

/// Breakpoint width names
/// @type map
$breakpoint-has-widths: ('palm', 'lap', 'portable', 'desk', 'wide');

/// Set if you'd like to placeholders for responsiveness.
/// @type boolean
$use-silent-classes:    true;

/// Set what you'd like to use for your responsive classes.
/// @type string
$class-type:            unquote('.');
@if $use-silent-classes == true{
    $class-type:        unquote('%') !global;
}





/*------------------------------------*\
    !RESPONSIVE MIXIN
\*------------------------------------*/

/**
 * Credit: Inuit.css
 */

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css/assemble.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * portable
 * desk
 * wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */

/// Set the palm end value. This value is created dynamically.
/// @type number
$palm-end:              $lap-start - 1px;

/// Set the lap end value. This value is created dynamically.
/// @type number
$lap-end:               $desk-start - 1px;

/// This mixing will be used to call your responsive breakpoints.
/// @access private
/// @param {string} $media-query
@mixin media-query($media-query){

    @if $media-query == palm{
        @media only screen and (max-width:$palm-end) { @content; }
    }

    @if $media-query == lap{
        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }
    }

    @if $media-query == lap-and-up{
        @media only screen and (min-width:$lap-start) { @content; }
    }

    @if $media-query == portable{
        @media only screen and (max-width:$lap-end) { @content; }
    }

    @if $media-query == desk{
        @media only screen and (min-width:$desk-start) { @content; }
    }

    @if $media-query == wide{
        @media only screen and (min-width: $wide-start) { @content; }
    }

}
